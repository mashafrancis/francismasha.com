import { promises as fs } from "node:fs";
import path from "node:path";

import { rimraf } from "rimraf";
import type { Registry } from "shadcn/registry";
import { registrySchema } from "shadcn/registry";

import { registryConfig } from "../config/registry";
import { registry } from "../registry";

const REGISTRY_PATH = path.join(process.cwd(), "src/__registry__");

/**
 * Build src/__registry__/registry.autogenerated.json, src/__registry__/index.tsx
 * Thanks @shadcn/ui
 */
export async function buildRegistry(registry: Registry) {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import React from "react";

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    if (!Array.isArray(item.files) || !item.files?.length) {
      continue;
    }

    const componentPath = `@/registry/${item.files[0].path}`;

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    files: [${item.files.map((file) => {
      const filePath = `src/registry/${file.path}`;
      return `{
      path: "${filePath}",
      type: "${file.type}",
    }`;
    })}],${
      item.type === "registry:example"
        ? `
    component: React.lazy(() => import("${componentPath}")),`
        : ""
    }
  },`;
  }

  index += `
}`;

  // Build /src/__registry__/registry.autogenerated.json
  let registryJSON = JSON.stringify(
    {
      $schema: "https://ui.shadcn.com/schema/registry.json",
      name: "ncdai",
      homepage: "https://chanhdai.com",
      items: registry.items
        .filter((item) => item.type !== "registry:example")
        .map((item) => {
          return {
            ...item,
            files:
              item.files?.map((file) => {
                if (file.path.startsWith("src/")) {
                  return file;
                }

                return {
                  ...file,
                  path: `src/registry/${file.path}`,
                };
              }) ?? [],
          };
        }),
    },
    null,
    2
  );

  const registryBaseUrl = registryConfig.baseUrl;
  const registryBaseUrlRegex = /<registryBaseUrl>/g;
  registryJSON = registryJSON.replace(registryBaseUrlRegex, registryBaseUrl);

  rimraf.sync(path.join(REGISTRY_PATH, "registry.autogenerated.json"));
  await fs.writeFile(
    path.join(REGISTRY_PATH, "registry.autogenerated.json"),
    registryJSON,
    "utf8"
  );

  // Build /src/__registry__/index.tsx
  rimraf.sync(path.join(REGISTRY_PATH, "index.tsx"));
  await fs.writeFile(path.join(REGISTRY_PATH, "index.tsx"), index, "utf8");
}

try {
  console.log("ðŸ’½ Building registry...");

  const result = registrySchema.safeParse(registry);

  if (!result.success) {
    console.error(result.error);
    process.exit(1);
  }

  await buildRegistry(result.data);

  console.log("âœ… Done!");
} catch (error) {
  console.error(error);
  process.exit(1);
}
